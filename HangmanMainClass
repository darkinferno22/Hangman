import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;

public class HangmanMainClass {
	static Random rand = new Random();
	static int lettersRemaining = 0;
    static int correct = 0;
    static int choice = -1;      //ArrayList lets us modify the array much easier than a normal array would using methods like add(Element E) and remove(int index, or remove(Element E)
    //ArrayList of random words
    static String[] words = {"banana", "grapes", "grape", "atmosphere", "stratosphere", "github", "anus", "camp", 
    "bananahammock", "syndrome", "incredible", "inedible", "california", "wyoming", "cat", "dog", "lovely", "eatery", "restaurant", "uncalled", "asshole", "faggot", "jared", "yunus", "nick", "computer", "united", "arab", "emirates"}; 
    static ArrayList<String> answerList = new ArrayList<String>();
    static ArrayList<String> correctLetters = new ArrayList<String>();
    static ArrayList<String> incorrectLetters = new ArrayList<String>();
    static ArrayList<String> randomWords = new ArrayList<String>();
    static ArrayList<String> answerArray = new ArrayList<String>();
    static String[] lettersGuessed = new String[26/*Number of letters in the alphabet*/];
    static String answer = "";
    public static void main(String[] args) {
    	runGame();
    }
    //Method for turning any string into an array of its individual characters
    public static String[] splitString(String s){
        return s.split("");
    }
    public static void runGame(){
    	answer = "";
    	answerArray = new ArrayList<String>();
        randomWords.add("rhino");
        randomWords.add("retarded");
        for(String word: words){
        	randomWords.add(word);
        }
        //Array to keep track of which letters you have guessed

        for(int i = 0; i < lettersGuessed.length; i++){
        	lettersGuessed[i] = "";
        }
		choice = parseInt(JOptionPane.showInputDialog("Would you like to: \n[1]Enter your own word\n[2]Have a random word selected for you"));
        switch(choice){
            case 1:
                answer = JOptionPane.showInputDialog("Enter the word to guess:");
                break;
            default:
                answer = (String) randomWords.toArray()[rand.nextInt(randomWords.size())];
                break;
        }
        //Split word into individual letters
        for(String str: splitString(answer)){
        	if(!str.equals("")){
        		answerArray.add(str);
        	}
        };
        //Create '_'s for display, determine numbers of letters
        for(String let: answerArray){
            correctLetters.add(let);
            answerList.add("_");
            lettersRemaining++;
        }
        JOptionPane.showMessageDialog(null, "Length of answer: " + answerArray.size());
        JOptionPane.showMessageDialog(null, "You have 7 chances!");
        while(true){
        	int letterOrWord = parseInt(JOptionPane.showInputDialog("[1] Guess a letter\n[2] Guess the word"));
            if(letterOrWord == 1){
            	guessLetter();
            }
            else
            	guessString();
        }    
    }
    public static void guessLetter(){
        while(true){            
            String guess = JOptionPane.showInputDialog("Which letter do you guess?");
            //Checks if you have already guessed the letter
            for(String let: lettersGuessed){
            	if(guess.equals(let)){
            		JOptionPane.showMessageDialog(null, "You have already guessed that letter! Try again faggot.");
            		guessLetter();
            	}
            };
            //Checks if guess is exactly one letter, if not forces you to try again
            if(guess.length() != 1){
                JOptionPane.showMessageDialog(null, "One letter please!");
                guessLetter();
            }
            //Checks each letter in the answer to see if it matches your guess
            for(int i = 0; i < HangmanMainClass.answerArray.size(); i++){
                if(answerArray.toArray()[i].equals(guess)){
                    correct++;//Checks number of letters in word
                    answerList.set(i, guess);
                }
            };
            String wordWithUnderscores = "";
            for(Object let: answerList){
                wordWithUnderscores += (let);
            }
            JOptionPane.showMessageDialog(null, wordWithUnderscores);
            for(int i = 0; i < lettersGuessed.length; i++){
                if(lettersGuessed[i].equals("")){
                    lettersGuessed[i] = guess;
                    break;
                }
            }
            if(correct == 0){
                JOptionPane.showMessageDialog(null, "There are none of your letter in the word.");
                incorrectLetters.add(guess);
            }
            else if(correct == 1){
                JOptionPane.showMessageDialog(null, "There is 1 " + guess + " in the word.");
            }
            else{
                JOptionPane.showMessageDialog(null, "There are " + correct + " " + guess + "'s in the word.");
            }
            lettersRemaining -= correct;
            if(lettersRemaining == 0){
            	JOptionPane.showMessageDialog(null, "A winner is you! The answer was: " + answer);
            	playAgain();
            }
            else{
            	JOptionPane.showMessageDialog(null, "Letters remaining: " + lettersRemaining);
            }
            guess = "";
            correct = 0;
            String letters = "";
            for(String value: lettersGuessed){
            	letters += (value + " ");
            }
            JOptionPane.showMessageDialog(null, "Letters guessed: " + letters);
            letters = "";
            for(Object value: incorrectLetters.toArray()){
            	letters += (value + " ");
            }
            JOptionPane.showMessageDialog(null, "Incorrect letters: " + letters);
            letters = "";
            if(7 - incorrectLetters.size() > 0){
                JOptionPane.showMessageDialog(null, "Chances Left: " + (7 - incorrectLetters.size()));
            }
            else{
                JOptionPane.showMessageDialog(null, "Ye be a loser and ye have lost. Faggot. The answer was: " + answer);
                playAgain();
            }
        }
    }
    public static void guessString(){
    	String finalGuess = JOptionPane.showInputDialog(null, "What do you think the word is? You lose if you guess wrong. LOWERCASE ONLY");
    	if(finalGuess.equals(answer)){
    		JOptionPane.showMessageDialog(null, "A winner is you! The answer was: " + answer);
        	playAgain();
    	}
    	else{
    		JOptionPane.showMessageDialog(null, "Ye be a loser and ye have lost. Faggot. The answer was: " + answer);
            playAgain();
    	}
    }
    public static void playAgain(){
    	int winChoice = parseInt(JOptionPane.showInputDialog("[1] Play Again\n[2] Quit"));
    	if(winChoice == 1){
    		runGame();
    	}
    	else{
    		System.exit(-1);
    	}
    }
}

