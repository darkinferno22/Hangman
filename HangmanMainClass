import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class HangmanMainClass {
    
    public static void main(String[] args) {
        Random rand = new Random();
    	int lettersRemaining = 0;
        int correct = 0;
        int choice = -1;      //ArrayList lets us modify the array much easier than a normal array would using methods like add(Element E) and remove(int index, or remove(Element E)
        //ArrayList of random words
        String[] words = {"banana", "grapes", "grape", "atmosphere", "stratosphere", "github", "anus", "camp", 
        "bananahammock", "syndrome", "incredible", "inedible", "california", "wyoming", "cat", "dog", "lovely", "eatery", "restaurant", "uncalled", "asshole", "faggot", "jared", "yunus", "nick", "computer"}; 
        ArrayList answerList = new ArrayList();
        ArrayList correctLetters = new ArrayList();
        ArrayList incorrectLetters = new ArrayList();
        ArrayList randomWords = new ArrayList();
        randomWords.add("rhino");
        randomWords.add("retarded");
        for(String word: words){
        	randomWords.add(word);
        }
        String answer;
        //Array to keep track of which letters you have guessed
        String[] lettersGuessed = new String[26/*Number of letters in the alphabet*/];
        //Sets answerArray to empty values, avoids NullPointerException
        chooseWord:
        for(int i = 0; i < lettersGuessed.length; i++){
        	lettersGuessed[i] = "";
        }
		Scanner scan = new Scanner(System.in);
		System.out.println("Would you like to: \n[1]Enter your own word\n[2]Have a random word selected for you");
        choice = parseInt(scan.nextLine());
        switch(choice){
            case 1:
                System.out.println("Enter the word to guess:");
                answer = scan.nextLine();
                break;
            default:
                answer = (String) randomWords.toArray()[rand.nextInt(randomWords.size())];
                break;
        }
        //Split word into individual letters
        String[] answerArray = splitString(answer);
        for(String let: answerArray){
            correctLetters.add(let);
            answerList.add("_");
            lettersRemaining++;
        }
        for(Object value: answerList){
            System.out.println(value);
        }
        System.out.println("Length of answer: " + answerArray.length);
        System.out.println("You have 7 chances!");
        guessLoop: //Used for restarting if guess is not one letter
        while(true){
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(HangmanMainClass.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("Which letter do you guess?");
            String guess;
            guess = new String(scan.nextLine());
            //Checks if you have already guessed the letter
            for(String let: lettersGuessed){
            	if(guess.equals(let)){
            		System.out.println("You have already guessed that letter! Try again faggot.");
            		continue guessLoop;
            	}
            };
            //Checks if guess is exactly one letter, if not forces you to try again
            if(splitString(guess).length != 1){
                System.out.println("One letter please!");
                continue guessLoop;
            }
            //Checks each letter in the answer to see if it matches your guess
            for(int i = 0; i < answerArray.length; i++){
                if(answerArray[i].equals(guess)){
                    correct++;//Checks number of letters in word
                    answerList.set(i, guess);
                }
            };
            for(Object let: answerList){
                System.out.print(let);
            }
            for(int i = 0; i < lettersGuessed.length; i++){
                if(lettersGuessed[i].equals("")){
                    lettersGuessed[i] = guess;
                    break;
                }
            }
            System.out.print("\n");
            try {
				Thread.sleep(500);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
            if(correct == 0){
                System.out.println("There are none of your letter in the word.");
                incorrectLetters.add(guess);
            }
            else if(correct == 1){
                System.out.println("There is 1 " + guess + " in the word.");
            }
            else{
                System.out.println("There are " + correct + " " + guess + "'s in the word.");
            }
            lettersRemaining -= correct;
            if(lettersRemaining == 0){
            	System.out.println("You win!\n[1] Play again\n[2] Quit");
            }
            else{
            	System.out.println("Letters remaining: " + lettersRemaining);
            }
            guess = "";
            correct = 0;
            lettersRemaining = 0;
            System.out.print("Letters guessed: ");
            for(String value: lettersGuessed){
            	System.out.print(value + " ");
            	try {
                    Thread.sleep(100);
		} catch (InterruptedException e) {
                    e.printStackTrace();
				}
            }
            System.out.println();
            System.out.print("Incorrect letters: ");
            for(Object value: incorrectLetters.toArray()){
            	System.out.print(value + " ");
            	try {
                    Thread.sleep(100);
		} catch (InterruptedException e) {
				}
            }
            System.out.println();
            if(7 - incorrectLetters.size() > 0){
                System.out.println("Chances Left: " + (7 - incorrectLetters.size()));
            }
            else{
                System.out.println("Ye be a loser and ye have lost. Faggot.");
                System.exit(-1);
            }
        }    
    }
    //Method for turning any string into an array of its individual characters
    public static String[] splitString(String s){
        return s.split("");
    }   
}
